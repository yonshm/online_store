name: Laravel CI/CD Pipeline

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  PHP_VERSION: "8.1"
  NODE_VERSION: "18"

jobs:
  # Job de validation du code
  code-quality:
    name: Code Quality & Static Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, pdo_pgsql, curl, json, zip, gd, exif, fileinfo
          coverage: xdebug

      - name: Validate composer.json
        run: composer validate --strict

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run PHP CodeSniffer
        run: |
          composer require --dev squizlabs/php_codesniffer
          ./vendor/bin/phpcs --standard=PSR12 app/ tests/

      - name: Run PHPStan static analysis
        run: |
          composer require --dev phpstan/phpstan
          ./vendor/bin/phpstan analyse app/ --level=5

      - name: Check for security vulnerabilities
        run: |
          composer require --dev enlightn/security-checker
          ./vendor/bin/security-checker security:check composer.lock

  # Job de tests unitaires
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, pdo_pgsql, curl, json, zip, gd, exif, fileinfo
          coverage: xdebug

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Copy .env.example
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Configure database
        run: |
          php artisan config:cache
          php artisan config:clear
          sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env
          sed -i 's/DB_DATABASE=.*/DB_DATABASE=laravel_test/' .env
          sed -i 's/DB_USERNAME=.*/DB_USERNAME=root/' .env
          sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=password/' .env
          sed -i 's/DB_PORT=.*/DB_PORT=3306/' .env
          sed -i 's/CACHE_DRIVER=.*/CACHE_DRIVER=array/' .env
          sed -i 's/SESSION_DRIVER=.*/SESSION_DRIVER=array/' .env
          sed -i 's/QUEUE_DRIVER=.*/QUEUE_DRIVER=sync/' .env

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run unit tests
        run: php artisan test tests/Unit/ --coverage-clover=coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job de tests de fonctionnalités
  feature-tests:
    name: Feature Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, pdo_pgsql, curl, json, zip, gd, exif, fileinfo
          coverage: xdebug

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Copy .env.example
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Configure database
        run: |
          php artisan config:cache
          php artisan config:clear
          sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env
          sed -i 's/DB_DATABASE=.*/DB_DATABASE=laravel_test/' .env
          sed -i 's/DB_USERNAME=.*/DB_USERNAME=root/' .env
          sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=password/' .env
          sed -i 's/DB_PORT=.*/DB_PORT=3306/' .env
          sed -i 's/CACHE_DRIVER=.*/CACHE_DRIVER=array/' .env
          sed -i 's/SESSION_DRIVER=.*/SESSION_DRIVER=array/' .env
          sed -i 's/QUEUE_DRIVER=.*/QUEUE_DRIVER=sync/' .env

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run feature tests
        run: php artisan test tests/Feature/ --coverage-clover=coverage-feature.xml

      - name: Upload feature test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-feature.xml
          flags: featuretests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job de tests d'optimisation du panier
  cart-optimization-tests:
    name: Cart Optimization Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, pdo_pgsql, curl, json, zip, gd, exif, fileinfo
          coverage: xdebug

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Copy .env.example
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Configure database
        run: |
          php artisan config:cache
          php artisan config:clear
          sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env
          sed -i 's/DB_DATABASE=.*/DB_DATABASE=laravel_test/' .env
          sed -i 's/DB_USERNAME=.*/DB_USERNAME=root/' .env
          sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=password/' .env
          sed -i 's/DB_PORT=.*/DB_PORT=3306/' .env
          sed -i 's/CACHE_DRIVER=.*/CACHE_DRIVER=array/' .env
          sed -i 's/SESSION_DRIVER=.*/SESSION_DRIVER=array/' .env
          sed -i 's/QUEUE_DRIVER=.*/QUEUE_DRIVER=sync/' .env

      - name: Run migrations
        run: php artisan migrate --force

      - name: Run cart optimization tests
        run: php artisan test tests/Feature/CartCookieOptimizationTest.php

      - name: Run cart optimization script
        run: php test_cart_optimization.php

  # Job de build et validation
  build:
    name: Build & Validation
    runs-on: ubuntu-latest
    needs: [unit-tests, feature-tests, cart-optimization-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, pdo_pgsql, curl, json, zip, gd, exif, fileinfo

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-dev --no-progress --no-interaction --optimize-autoloader

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build assets
        run: npm run production

      - name: Copy .env.example
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Optimize application
        run: |
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      - name: Validate build
        run: |
          php artisan about
          php artisan route:list
          php artisan config:show

      - name: Create build artifact
        run: |
          tar -czf laravel-app.tar.gz \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='tests' \
            --exclude='.env' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            .

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: laravel-app-build
          path: laravel-app.tar.gz
          retention-days: 30

  # Job de sécurité
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: "http://localhost:8000"

      - name: Run dependency vulnerability scan
        run: |
          composer audit --format=json > security-audit.json

      - name: Upload security results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            zap-report.html
            security-audit.json
          retention-days: 90

  # Job de déploiement en staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: laravel-app-build

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # Ici vous ajouteriez vos commandes de déploiement
          # Par exemple: rsync, scp, ou utilisation d'un service comme Heroku, Vercel, etc.

      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Tests de base pour vérifier que l'application fonctionne
          curl -f http://staging.yourdomain.com/health || exit 1

  # Job de déploiement en production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: laravel-app-build

      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          # Commandes de déploiement en production

      - name: Run production health checks
        run: |
          echo "Running health checks on production..."
          curl -f http://yourdomain.com/health || exit 1

      - name: Notify deployment success
        run: |
          echo "Production deployment completed successfully!"
          # Ici vous pourriez ajouter des notifications (Slack, email, etc.)

  # Job de notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "🎉 All jobs completed successfully!"
          # Ajouter vos notifications de succès

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Some jobs failed!"
          # Ajouter vos notifications d'échec
